module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    
    
    input button_onoff,            // button to on/off
    input button_l,         // left button
    input button_r,         // right button
    
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    //output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    //output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    //input io_dip [3][8]     // DIP switches on IO Shield
    output a[16],
    output c[16],
    input button2

  ) {
  
  sig rst;                  // reset signal
  sig gen_botrows[2][16];          // temp storage of the rows from generator_bottom
  sig gen_topcols[16][14];          // temp storage of the cols from generator_top
  var i;
  
  fsm gamefsm(.clk(clk), .rst(rst), #INIT(STAGE1_START)) = {IDLE,STAGE1_START, STAGE1};
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner button_left;
    .rst(rst){
      //multi_seven_seg seg;
      generator_bottom generator_bottom;
      generator_top generator_top;
      check check;
      //leddisplay leddisplay;
      
      dff score;
      dff currentrows[2][16];
      dff currentcols[16][14];
     
     
     counter slowclock(#SIZE(1),#DIV(8));  //smaller the faster the refresh 
     led_matrix ld;
     leddisplay led_converter;
    }
  }

    .clk(slowclock.value) {
     fsm state (#INIT(ONE)) = {ONE,TWO, THREE};
     dff cSignal[16](.rst(rst));
     dff aSignal[16](.rst(rst));
    }
  always {

  generator_top.button2=button2;
  io_seg = 8hff;          // turn segments off    
  a = 16b0;
  c = 16b0;
  button_left.in=button_l;
  

  reset_cond.in = ~rst_n; // input raw inverted reset signal
  rst = reset_cond.out;   // conditioned reset

  
  led = 8h00;             // turn LEDs off
  spi_miso = bz;          // not using SPI
  spi_channel = bzzzz;    // not using flags
  avr_rx = bz;            // not using serial port
  
    // initialise things
    led=generator_bottom.led;
    generator_bottom.button_l = button_left.out;
    generator_bottom.button_r = button_r;
    gen_botrows[0] = 16b0000011100000000;
    gen_botrows[1] = 16b0000011100000000;
    generator_bottom.rows = gen_botrows;
    led_converter.rows = ~generator_bottom.rowsout;
    
    
    for ( i=0; i<16; i++){
          gen_topcols[i] = ~14b0;
          }
    generator_top.cols = gen_topcols;
    
    led_converter.cols = gen_topcols;
    
    ld.pattern = led_converter.out;
    // ****** CHANGED ******    
    
    check.cols = gen_topcols;
    check.rows = gen_botrows;
    check.score = score.q;
    a=ld.a;
    c=ld.c;
   
    
    /*
    case (gamefsm.q)  {
    
      gamefsm.IDLE:
        // display score of last player
        
        if (button_start.out == 1){
        gamefsm.d = gamefsm.STAGE1_START;
        }
        else{
        gamefsm.d = gamefsm.IDLE;}
          
        
      gamefsm.STAGE1_START:
        // initialise the playground; user in the middle
        // no coconuts
        gen_botrows[0] = ~16b0000001110000000;
        gen_botrows[1] = ~16b0000001110000000;
        generator_bottom.rows=gen_botrows;
        led_converter.rows=generator_bottom.rowsout;
        
        //cols[16][14]
        for ( i=0; i<16; i++){
          gen_topcols[i] = ~14b0;
          }
        generator_bottom.button_l = button_l;
        generator_bottom.button_r = button_r;
        
//        led_converter.cols=gen_topcols;
        // save the generator_bottom.rowsout
        // display it
        
        currentrows.d = generator_bottom.rowsout;
        if(gamefsm.q!=gamefsm.STAGE1) currentrows.d=currentrows.q;
        led_converter.rows = generator_bottom.rowsout;
        led=generator_bottom.led;
        generator_top.cols = gen_topcols;
        
        //save the generator_top.colsout;
        // display it
        currentcols.d = generator_top.colsout;
        if(gamefsm.q!=gamefsm.STAGE1) currentcols.d=currentcols.q;
        led_converter.cols = generator_top.colsout;
        
        ld.pattern = led_converter.out;
        a = ld.a;
        c = ld.c;
        gamefsm.d = gamefsm.STAGE1_START;
        
             
      gamefsm.STAGE1:
      
        // pass in the prev saved rowsout & colsout
        generator_bottom.rows = currentrows.q;
        
        generator_bottom.button_l = button_l;
        generator_bottom.button_r = button_r;
        
        generator_top.cols = currentcols.q;
        
        // if timer != 0
        //check if score + 1
        check.cols = generator_top.colsout;
        check.rows = generator_bottom.rowsout;
        check.score = score.q;
        score.d = check.outscore;
        
        gamefsm.d = gamefsm.STAGE1;
        
        //else if timer == 0
        //state.d= = state.IDLE;
    */
  
  }
}

