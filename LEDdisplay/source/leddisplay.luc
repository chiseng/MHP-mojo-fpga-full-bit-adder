module leddisplay (
    input clk,  // clock
    input rst,  // reset
    input cols[16][14],
    input rows[2][16],
    output out[16][16]
  ) {
  
  const FLIP = 16;
  counter counter_r (.clk(clk),.rst(rst),#SIZE(3), #DIV(FLIP), #TOP(15));
  var i;
  var j;

  always {

    
    // (hardcoded) deciper cols and rows (from generator) & save it in out[16][16]

    out[2] = c{cols[0][13] , cols[1][13] , cols[2][13] , cols[3][13] , cols[4][13] , cols[5][13] , cols[6][13] , cols[7][13] , cols[8][13] , cols[9][13] , cols[10][13] , cols[11][13] , cols[12][13] , cols[13][13], cols[14][13], cols[15][13]};
    out[3] = c{cols[0][12] , cols[1][12] , cols[2][12] , cols[3][12] , cols[4][12] , cols[5][12] , cols[6][12] , cols[7][12] , cols[8][12] , cols[9][12] , cols[10][12] , cols[11][12] , cols[12][12] , cols[13][12], cols[14][12], cols[15][12]};
    out[4] = c{cols[0][11] , cols[1][11] , cols[2][11] , cols[3][11] , cols[4][11] , cols[5][11] , cols[6][11] , cols[7][11] , cols[8][11] , cols[9][11] , cols[10][11] , cols[11][11] , cols[12][11] , cols[13][11], cols[14][11], cols[15][11]};
    out[5] = c{cols[0][10] , cols[1][10] , cols[2][10] , cols[3][10] , cols[4][10] , cols[5][10] , cols[6][10] , cols[7][10] , cols[8][10] , cols[9][10] , cols[10][10] , cols[11][10] , cols[12][10] , cols[13][10], cols[14][10], cols[15][10]};
    out[6] = c{cols[0][9] , cols[1][9] , cols[2][9] , cols[3][9] , cols[4][9] , cols[5][9] , cols[6][9] , cols[7][9] , cols[8][9] , cols[9][9] , cols[10][9] , cols[11][9] , cols[12][9] , cols[13][9], cols[14][9], cols[15][9]};
    out[7] = c{cols[0][8] , cols[1][8] , cols[2][8] , cols[3][8] , cols[4][8] , cols[5][8] , cols[6][8] , cols[7][8] , cols[8][8] , cols[9][8] , cols[10][8] , cols[11][8] , cols[12][8] , cols[13][8], cols[14][8], cols[15][8]};
    out[8] = c{cols[0][7] , cols[1][7] , cols[2][7] , cols[3][7] , cols[4][7] , cols[5][7] , cols[6][7] , cols[7][7] , cols[8][7] , cols[9][7] , cols[10][7] , cols[11][7] , cols[12][7] , cols[13][7], cols[14][7], cols[15][7]};
    out[9] = c{cols[0][6] , cols[1][6] , cols[2][6] , cols[3][6] , cols[4][6] , cols[5][6] , cols[6][6] , cols[7][6] , cols[8][6] , cols[9][6] , cols[10][6] , cols[11][6] , cols[12][6] , cols[13][6], cols[14][6], cols[15][6]};
    out[10] = c{cols[0][5] , cols[1][5] , cols[2][5] , cols[3][5] , cols[4][5] , cols[5][5] , cols[6][5] , cols[7][5] , cols[8][5] , cols[9][5] , cols[10][5] , cols[11][5] , cols[12][5] , cols[13][5], cols[14][5], cols[15][5]};
    out[11] = c{cols[0][4] , cols[1][4] , cols[2][4] , cols[3][4] , cols[4][4] , cols[5][4] , cols[6][4] , cols[7][4] , cols[8][4] , cols[9][4] , cols[10][4] , cols[11][4] , cols[12][4] , cols[13][4], cols[14][4], cols[15][4]};
    out[12] = c{cols[0][3] , cols[1][3] , cols[2][3] , cols[3][3] , cols[4][3] , cols[5][3] , cols[6][3] , cols[7][3] , cols[8][3] , cols[9][3] , cols[10][3] , cols[11][3] , cols[12][3] , cols[13][3], cols[14][3], cols[15][3]};
    out[13] = c{cols[0][2] , cols[1][2] , cols[2][2] , cols[3][2] , cols[4][2] , cols[5][2] , cols[6][2] , cols[7][2] , cols[8][2] , cols[9][2] , cols[10][2] , cols[11][2] , cols[12][2] , cols[13][2], cols[14][2], cols[15][2]};
    out[14] = c{cols[0][1] , cols[1][1] , cols[2][1] , cols[3][1] , cols[4][1] , cols[5][1] , cols[6][1] , cols[7][1] , cols[8][1] , cols[9][1] , cols[10][1] , cols[11][1] , cols[12][1] , cols[13][1], cols[14][1], cols[15][1]};
    out[15] = c{cols[0][0] , cols[1][0] , cols[2][0] , cols[3][0] , cols[4][0] , cols[5][0] , cols[6][0] , cols[7][0] , cols[8][0] , cols[9][0] , cols[10][0] , cols[11][0] , cols[12][0] , cols[13][0], cols[14][0], cols[15][0]};
    out[0] = rows[0];
    out[1] = rows[1];
    
  }
}
