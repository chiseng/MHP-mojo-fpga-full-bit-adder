module generator_bottom (

    
// module generates the 2 rows of the LED matrix    
    
    input clk,  // clock
    input rst,  // reset
    input button_l[1],        // left button from user input
    input button_r[1],        // right button from user input
    input rows[2][16],        // rows values from previous cycle
    output rowsout[2][16],     // rows values for current cycle
    output led
  ) {
  // instantiate the alu module
  alu alu;
  
  // ALUFN value for the different functions used
  const XOR = 6b010110;
  const SHL = 6b100000;
  const SHR = 6b100001;
  
  .clk(clk){
  // temp values of outputs of ALU
  dff xoroutput[16];       // to check if both buttons are pressed simultaneously
  dff shiftleft[2][16];    // to save rowsout values if left is pressed
  dff shiftright[2][16];   // to save rowsout values if right is pressed
  .rst(rst){
    fsm new_fsm={IDLE, LEFT, RIGHT};
    } 
  }
  
  always {
    // initialise rowsout values 
    rowsout[0] = 16b0;
    rowsout[1] = 16b0;
    led=8h00;
    /*
    alu.a = button_l;      // button_l XOR button_r
    alu.b = button_r;
    alu.alufn = XOR;
    xoroutput.d = alu.out;
    
    alu.a = rows[0];      // shift left row 0 by 1 
    alu.b = 1;
    alu.alufn = SHL;
    shiftleft.d[0] = alu.out;
    
    alu.a = rows[1];      // shift left row 1 by 1
    alu.b = 1;
    alu.alufn = SHL;
    shiftleft.d[1] = alu.out;
    
    alu.a = rows[0];      // shift right row 0 by 1
    alu.b = 1;
    alu.alufn = SHR;
    shiftright.d[0] = alu.out;
    
    alu.a = rows[1];      // shift right row 1 by 1
    alu.b = 1;
    alu.alufn = SHR;
    shiftright.d[1] = alu.out;
    */
    alu.a = 0;      // button_l XOR button_r
    alu.b = 0;
    alu.alufn = 0;
    
    
    
    case(new_fsm.q){
      new_fsm.IDLE:
    alu.a = button_l;      // button_l XOR button_r
    alu.b = button_r;
    alu.alufn = XOR;
    xoroutput.d = alu.out;
      rowsout = rows;
      if(button_l==1 && xoroutput.q == 16b0000000000000001){
        new_fsm.d=new_fsm.LEFT;
        }
      if(button_r==1 && xoroutput.q == 16b1){
        new_fsm.d=new_fsm.RIGHT;
        }
      new_fsm.RIGHT:
      if (rows[0][1] != 1){  
       alu.a = rows[0];      // shift left row 0 by 1 
      alu.b = 1;
      alu.alufn = SHL;
      shiftleft.d[0] = alu.out;
    
      alu.a = rows[1];      // shift left row 1 by 1
      alu.b = 1;
      alu.alufn = SHL;
      shiftleft.d[1] = alu.out;
      // if right is pressed and user is not at the right edge
      // then shift right rows by 1
        rowsout = shiftright.q;
      }        
        new_fsm.d=new_fsm.LEFT;
        
      new_fsm.LEFT:
      if (rows[0][14] != 1){  
    alu.a = rows[0];      // shift right row 0 by 1
    alu.b = 1;
    alu.alufn = SHR;
    shiftright.d[0] = alu.out;
    
    alu.a = rows[1];      // shift right row 1 by 1
    alu.b = 1;
    alu.alufn = SHR;
    shiftright.d[1] = alu.out;
      // if left is pressed and user is not at the left edge
      // then shift left rows by 1
         rowsout = shiftleft.q;
      }
        new_fsm.d=new_fsm.IDLE;
      
    }
    
          
}
} 