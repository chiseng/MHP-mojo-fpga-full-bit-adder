module generator_bottom (

// module generates the 2 rows of the LED matrix    
    
    input clk,  // clock
    input rst,  // reset
    input button_l[1],        // left button from user input
    input button_r[1],        // right button from user input
    input rows[2][16],        // rows values from previous cycle
    output rowsout[2][16]     // rows values for current cycle
  ) {
  // instantiate the alu module
  alu alu;
  
  // ALUFN value for the different functions used
  const XOR = 6b010110;
  const SHL = 6b100000;
  const SHR = 6b100001;
  
  .clk(clk){
  button_conditioner button_left;
  button_conditioner button_right;
  dff shiftstore[16];
  edge_detector left_edge(#RISE(1),#FALL(0));
    edge_detector right_edge(#RISE(1),#FALL(0));
  .rst(rst){
    registerSetup regs;
    } 
  }
  .clk(clk){
    .rst(rst){
      fsm new_fsm={IDLE, LEFT, RIGHT, SAVED_STATE};
    }
  }
  
  sig left;
  sig right;
  
  always {
    button_left.in=button_l;
    button_right.in=button_r;
    left_edge.in=button_left.out;
    right_edge.in=button_right.out;
    left=left_edge.out;
    right=right_edge.out;
    // initialise values 
    rowsout[0] = 16b0;
    rowsout[1] = 16b0; 
    alu.a = 0;      
    alu.b = 0;
    alu.alufn = 0;
    rowsout= {shiftstore.q,shiftstore.q};
    regs.en=0;
    regs.data=rows;
    
    
    case(new_fsm.q){
      new_fsm.IDLE:
        rowsout=rows; //initialise rowsout to be the original rows
        regs.en=1;     //set write to be 1
        regs.data=rows; //set the data to be the original rows
        
        new_fsm.d=new_fsm.SAVED_STATE;
        
        
        
      new_fsm.LEFT:
          // if left if pressed and user is not at the edge
        if (regs.out[0][15] != 1){
          alu.a = regs.out[0];      // shift left row 0 by 1, using the data in regs
          alu.b = 1; 
          alu.alufn = SHL;
          regs.en=1;       //write
          regs.data={alu.out,alu.out};//write new data

          }

        rowsout=regs.out; //get the new data
        new_fsm.d=new_fsm.SAVED_STATE; //change state
        
        
        
        
        
        new_fsm.RIGHT:
        // if right is pressed and user is not at the edge
          if (regs.out[0][0] != 1){  
          regs.en=1;
          alu.a = regs.out[0];      // shift right row by 1
          alu.b = 1;
          alu.alufn = SHR;
          regs.data={alu.out,alu.out}; //write new data
      }

        rowsout=regs.out;
        new_fsm.d=new_fsm.SAVED_STATE;  
        
        
           
         new_fsm.SAVED_STATE:
          alu.a = left;      // button_l XOR button_r
          alu.b = right;
          alu.alufn = XOR;
          regs.en=0;          
        
        
          if(left!=1 && alu.out != 1){
            rowsout=regs.out;
            new_fsm.d=new_fsm.SAVED_STATE;
          }
          
          else if(left==1 && alu.out == 1){
            new_fsm.d=new_fsm.LEFT;
          }
      
          if(right!=1 && alu.out != 1){
            regs.en=0;
            rowsout=regs.out;
            new_fsm.d=new_fsm.SAVED_STATE;
          }
     
        
          if(right==1 && alu.out == 1){
           new_fsm.d=new_fsm.RIGHT;
          }    
    }
}
} 