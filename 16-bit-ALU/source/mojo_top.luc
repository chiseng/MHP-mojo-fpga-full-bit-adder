module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  sig lookatA[16];
  sig a[16];
  sig b[16];
  sig alufn[6];

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    a = 16x{0};
    b = 16x{0};
    alufn = 6x{0};
    lookatA = 16x{0};
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits

    
    // value of a
    if(io_dip[2][7] == 1)
      {
      // io_seg = 7b1110111;//A
      a = io_dip[1] + io_dip[0]; // 00000000 00000000
      lookatA = io_dip[1] + io_dip[0];
      }
    
    else if(io_dip[2][7] == 0)
      {
      // io_seg = 7b0011111;//b
      b = io_dip[1] + io_dip[0];
      }
    
    alufn = io_dip[2][5:0];
    
    
    
    /*
    if(lookatA[0] == 1)
      {
      io_led[0][0] = 1;
    }
    if(lookatA[1] == 1)
      {
      io_led[0][1] = 1;
    }
        if(lookatA[2] == 1)
      {
      io_led[0][2] = 1;
    }
        if(lookatA[3] == 1)
      {
      io_led[0][3] = 1;
    }
        if(lookatA[4] == 1)
      {
      io_led[0][4] = 1;
    }
        if(lookatA[5] == 1)
      {
      io_led[0][5] = 1;
    }
        if(lookatA[6] == 1)
      {
      io_led[0][6] = 1;
    }
        if(lookatA[7] == 1)
      {
      io_led[0][7] = 1;
    }
        if(lookatA[8] == 1)
      {
      io_led[1][0] = 1;
    }
        if(lookatA[9] == 1)
      {
      io_led[1][1] = 1;
    }
    */
    
    

  }
}