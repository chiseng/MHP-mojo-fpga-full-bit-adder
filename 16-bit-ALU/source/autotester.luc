module autotester (
    input clk,  // clock
    input rst,  // reset_conditioner
    
    input start_stop,
    input reset,
    
    output a[16],
    output b[16],
    output out[16],
    output seg1[8],
    output seg2[8],
    output seg3[8],
    output seg4[8]

  ) {
  
  .clk(clk) {
    
    .rst(rst) {
      dff change_state[26];
      fsm state = {IDLE, ADD1, ADD2, ADD3, ADD4,  SUB1, SUB2, SUB3, SUB4,
                  AND1, AND2, OR1, OR2, XOR1, XOR2, LDR1, LDR2, B1, B2,
                  NAND1, NAND2, NOR1, NOR2, SHL1, SHL2, 
                  SHR1, SHR2, SRA1, SRA2, CMPEQ1, CMPEQ2, CMPLT1, 
                  CMPLT2, CMPLT3, CMPLE1, CMPLE2, CMPLE3, MUL1, MUL2, 
                  MUL3, MUL4, DIV1, DIV2, DIV3, PASS, ERR};  
 
          } 
  }
    const ADD   = 6b000000;
    const SUB   = 6b000001;
    const AND   = 6b011000; 
    const OR    = 6b011110;
    const XOR   = 6b010110; 
    const LDR   = 6b011010;
    const B     = 6b011100;
    const NAND  = 6b010111;
    const NOR   = 6b010001;
    const SHL   = 6b100000; 
    const SHR   = 6b100001; 
    const SRA   = 6b100011;
    const CMPEQ = 6b110011; 
    const CMPLT = 6b110101; 
    const CMPLE = 6b110111;
    const MUL   = 6b000010; 
    const DIV   = 6b000011;
  
  
  
  alu alu;

  always {
    out = 0;
    a = 0;
    b = 0;
    alu.alufn = 6b000000;
    alu.a = 16hxx;
    alu.b = 16hxx;
    seg1=8h2;
    seg2=8h2;
    seg3=8h2;
    seg4=8h2;
    
    case (state.q){
    
      state.IDLE:
      if(start_stop){
        state.d=state.ADD1;
        }
        
        
      state.ADD1:    // add 2 positive numbers: 150 + 30 = 180
      
        alu.alufn = ADD;
        alu.a = 16b0000000010010110;
        alu.b = 16b0000000000011110;
        seg1=8h4;
        seg2=8h6;
        seg3=8h6;
        seg4=8h0;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000010110100){
          state.d = state.ADD2;
          }
        else {
          state.d = state.ERR;
          }
        }
        
      state.ADD2:   // add 1 positive number with 1 negative number: 150 - 30 = 120 
        alu.alufn = ADD;
        alu.a = 16b0000000010010110;
        alu.b = 16b0000000000011110;
        change_state.d = change_state.q+1;
        seg1=8h4;
        seg2=8h6;
        seg3=8h6;
        seg4=8hA;
        if(change_state.q==4999999){
        change_state.d=0;
        if (alu.out == 16b000000001111000){
          state.d = state.ADD3;
          }
        else {
          state.d = state.ERR;
          }
        }
        
      state.ADD3:   // add 1 negative number with 1 positive number: -150 + 30 = -120 
        alu.alufn = ADD;
        alu.a = 16b1111111101101010;
        alu.b = 16b0000000000011110;
        change_state.d = change_state.q+1;
        seg1=8h4;
        seg2=8h6;
        seg3=8h6;
        seg4=8hB;
        if(change_state.q==4999999){
        change_state.d=0;
        if (alu.out == 16b1111111110001000){
          state.d = state.ADD4;
          }
        else {
          state.d = state.ERR;
          }
        }
        
      state.ADD4:   // add two zeros together: 0 + 0 = 0 
        alu.alufn = ADD;
        alu.a = 16b0000000000000000;
        alu.b = 16b0000000000000000;
        change_state.d = change_state.q+1;
        seg1=8h4;
        seg2=8h6;
        seg3=8h6;
        seg4=8hC;
        if(change_state.q==4999999){
        change_state.d=0;
        if (alu.out == 16b0000000000000000){
          state.d = state.SUB1;
          }
        else {
          state.d = state.ERR;
          }
        }
        
      state.SUB1:    // subtract 1 positive number from 1 positive number: 150 - 30 = 120
        alu.alufn = SUB;
        alu.a = 16b0000000010010110;
        alu.b = 16b0000000000011110;
        change_state.d = change_state.q+1;
        seg1=8h5;
        seg2=8hD;
        seg3=8hE;
        seg4=8h0;
        if(change_state.q==4999999){
        change_state.d=0;
        if (alu.out == 16b0000000001111000){
          state.d = state.SUB2;
          }
        else {
          state.d = state.ERR;
          }
        }

      state.SUB2:    // subtract 1 negative number from 1 positive number: 150 - (-30) = 180
        alu.alufn = SUB;
        alu.a = 16b0000000010010110;
        alu.b = 16b1111111111100010;
        change_state.d = change_state.q+1;
        seg1=8h5;
        seg2=8hD;
        seg3=8hE;
        seg4=8hA;
        if(change_state.q==4999999){
        change_state.d=0;
        if (alu.out == 16b0000000010110100){
          state.d = state.SUB3;
          }
        else {
          state.d = state.ERR;
          }
        }
        
      state.SUB3:    // subtract 1 positive number from 1 negative number: -150 - 30 = -180
        alu.alufn = SUB;
        alu.a = 16b1111111101101010;
        alu.b = 16b0000000000011110;
        change_state.d = change_state.q+1;
        seg1=8h5;
        seg2=8hD;
        seg3=8hE;
        seg4=8hB;
        if(change_state.q==4999999){
        change_state.d=0;
        if (alu.out == 16b1111111101001100){
          state.d = state.SUB4;
          }
        else {
          state.d = state.ERR;
          }
        }
        
      state.SUB4:    // subtract 1 negative number from 1 negative number: -150 - (-30) = -120
        alu.alufn = SUB;
        alu.a = 16b1111111101101010;
        alu.b = 16b1111111111100010;
        change_state.d = change_state.q+1;
        seg1=8h5;
        seg2=8hD;
        seg3=8hE;
        seg4=8hC;
        if(change_state.q==4999999){
        change_state.d=0;
        if (alu.out == 16b1111111110001000){
          state.d = state.AND1;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.AND1:    // AND two values: 1111 0001 AND 1111 1100 => 1111 0000
        alu.alufn = AND;
        alu.a = 16b0000000011110001;
        alu.b = 16b0000000011111100;
        change_state.d = change_state.q+1;
        seg1=8h4;
        seg2=8hF;
        seg3=8h6;
        seg4=8h0;
        if(change_state.q==4999999){
        change_state.d=0;
        if (alu.out == 16b0000000011110000){
          state.d = state.AND2;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.AND2:    // AND two values: 0000 0001 AND 1111 1111 => 0000 0001
        alu.alufn = AND;
        alu.a = 16b0000000000000001;
        alu.b = 16b0000000011111111;
        change_state.d = change_state.q+1;
        seg1=8h5;
        seg2=8hD;
        seg3=8hE;
        seg4=8hA;
        if(change_state.q==4999999){
        change_state.d=0;
        if (alu.out == 16b0000000000000001){
          state.d = state.OR1;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.OR1:    // OR two values: 0000 0001 AND 1111 1111 => 1111 1111
        alu.alufn = OR;
        alu.a = 16b0000000000000001;
        alu.b = 16b0000000011111111;
        change_state.d = change_state.q+1;
        seg1=8h10;
        seg2=8h11;
        seg3=8h0;
        seg4=8h2;
        if(change_state.q==4999999){
        change_state.d=0;
        if (alu.out == 16b0000000011111111){
          state.d = state.PASS;
          }
        else {
          state.d = state.ERR;
          }
        }
      /*
      state.OR2:    // OR two values: 0000 0001 AND 0000 1110 => 0000 1111
        alu.alufn = OR;
        alu.a = 16b0000000000000001;
        alu.b = 16b0000000000001110;
        change_state.d = change_state.q+1;
        seg1=8h10;
        seg2=8h11;
        seg3=8hA;
        seg4=8h2;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000001111){
          state.d = state.XOR1;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.XOR1:    // XOR two values: 0000 0001 AND 0000 1111 => 0000 1110
        alu.alufn = XOR;
        alu.a = 16b0000000000000001;
        alu.b = 16b0000000000001111;
        change_state.d = change_state.q+1;
        seg1=8h12;
        seg2=8h10;
        seg3=8h11;
        seg4=8h0;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000001110){
          state.d = state.XOR2;
          }
        else {
          state.d = state.ERR;
          }
        }
        
      state.XOR2:    // XOR two values: 0000 1111 AND 0000 1111 => 0000 0000
        alu.alufn = XOR;
        alu.a = 16b0000000000001111;
        alu.b = 16b0000000000001111;
        change_state.d = change_state.q+1;
        seg1=8h12;
        seg2=8h10;
        seg3=8h11;
        seg4=8hA;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000000000){
          state.d = state.LDR1;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.LDR1:    // Get the LDR ("A") of two values: 0000 0011 , 0000 1111 => 0000 0011
        alu.alufn = LDR;
        alu.a = 16b0000000000000011;
        alu.b = 16b0000000000001111;
        change_state.d = change_state.q+1;
        seg1=8h9;
        seg2=8h6;
        seg3=8h11;
        seg4=8h0;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000000011){
          state.d = state.LDR2;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.LDR2:    // Get the LDR ("A") of two values: 1111 0011 , 0000 1111 => 1111 0011
        alu.alufn = LDR;
        alu.a = 16b0000000011110011;
        alu.b = 16b0000000000001111;
        change_state.d = change_state.q+1;
        seg1=8h9;
        seg2=8h6;
        seg3=8h11;
        seg4=8hA;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000011110011){
          state.d = state.B1;
          }
        else {
          state.d = state.ERR;
          }
        }
           
      state.B1:    // Get the "B" of two values: 0000 0011 , 0000 1111 => 0000 1111
        alu.alufn = B;
        alu.a = 16b0000000000000011;
        alu.b = 16b0000000000001111;
        change_state.d = change_state.q+1;
        seg1=8h2;
        seg2=8h2;
        seg3=8hE;
        seg4=8h0;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000001111){
          state.d = state.B2;
          }
        else {
          state.d = state.ERR;
          }
        }
           
      state.B2:    // Get the "B" of two values: 1111 0011 , 0000 1101 => 1111 1101
        alu.alufn = B;
        alu.a = 16b0000000011110011;
        alu.b = 16b0000000000001101;
        change_state.d = change_state.q+1;
        seg1=8h2;
        seg2=8h2;
        seg3=8hE;
        seg4=8hA;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000011111101){
          state.d = state.NAND1;
          }
        else {
          state.d = state.ERR;
          }
        }
           
      state.NAND1:    // NAND two values: 0000 0011 NAND 0000 1111 => 1111 1100
        alu.alufn = NAND;
        alu.a = 16b0000000000000011;
        alu.b = 16b0000000000001111;
        change_state.d = change_state.q+1;
        seg1=8hF;  // HAVENT UPDATED
        seg2=8h4;  // HAVENT UPDATED
        seg3=8hF;  // HAVENT UPDATED
        seg4=8h0;  // HAVENT UPDATED
        if(change_state.q==4999999){
        if (alu.out == 16b0000000011111100){
          state.d = state.NAND2;
          }
        else {
          state.d = state.ERR;
          }
        }
           
      state.NAND2:    // NAND two values: 1111 0011 NAND 0000 1101 => 1111 1110
        alu.alufn = NAND;
        alu.a = 16b0000000011110011;
        alu.b = 16b0000000000001101;
        change_state.d = change_state.q+1;
        seg1=8hF;  //HAVENT UPDATED
        seg2=8h4;  //HAVENT UPDATED
        seg3=8hF;  //HAVENT UPDATED
        seg4=8hA;  // HAVENT UPDATED
        if(change_state.q==4999999){
        if (alu.out == 16b0000000011111110){
          state.d = state.NOR1;
          }
        else {
          state.d = state.ERR;
          }
        }
           
      state.NOR1:    // NOR two values: 0000 0011 NOR 0000 1111 => 1111 0000
        alu.alufn = NOR;
        alu.a = 16b0000000000000011;
        alu.b = 16b0000000000001111;
        change_state.d = change_state.q+1;
        seg1=8hF;
        seg2=8h10;
        seg3=8h11;
        seg4=8h0;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000011110000){
          state.d = state.NOR2;
          }
        else {
          state.d = state.ERR;
          }
        }
           
      state.NOR2:    // NOR two values: 1111 0011 NOR 0000 1101 => 0000 0000
        alu.alufn = NOR;
        alu.a = 16b0000000011110011;
        alu.b = 16b0000000000001101;
        change_state.d = change_state.q+1;
        seg1=8hF;
        seg2=8h10;
        seg3=8h11;
        seg4=8hA;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000000000){
          state.d = state.SHL1;
          }
        else {
          state.d = state.ERR;
          }
        }
           
           
      state.SHL1:    // Shift left 0 bits from 0000 1111 => 0000 1111
        alu.alufn = SHL;
        alu.a = 16b0000000000001111;
        alu.b = 16b0000000000000000;
        change_state.d = change_state.q+1;
        seg1=8h5;
        seg2=8h13;
        seg3=8h8;
        seg4=8h0;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000001111){
          state.d = state.SHL2;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.SHL2:    // Shift left 4 bits from 0000 1111 => 1111 0000
        alu.alufn = SHL;
        alu.a = 16b0000000000001111;
        alu.b = 16b0000000000000100;
        change_state.d = change_state.q+1;
        seg1=8h5;
        seg2=8h13;
        seg3=8h8;
        seg4=8hA;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000011110000){
          state.d = state.SHR1;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.SHR1:    // Shift right 0 bits from 0000 1111 => 0000 1111
        alu.alufn = SHR;
        alu.a = 16b0000000000001111;
        alu.b = 16b0000000000000000;
        change_state.d = change_state.q+1;
        seg1=8h5;
        seg2=8h13;
        seg3=8h11;
        seg4=8h0;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000001111){
          state.d = state.SHR2;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.SHR2:    // Shift right 8 bits from 0110 1111 0000 1111 => 0000 0000 0110 1111
        alu.alufn = SHR;
        alu.a = 16b0110111100001111;
        alu.b = 16b0000000000001000;
        change_state.d = change_state.q+1;
        seg1=8h5;
        seg2=8h13;
        seg3=8h11;
        seg4=8hA;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000001101111){
          state.d = state.SRA1;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.SRA1:    // Shift right arithmetic of 4 bits from 1110 1111 0000 1111 => 1111 1111 1110 1111
        alu.alufn = SRA;
        alu.a = 16b1110111100001111;
        alu.b = 16b0000000000000100;
        change_state.d = change_state.q+1;
        seg1=8h5;
        seg2=8h11;
        seg3=8h4;
        seg4=8h0;
        if(change_state.q==4999999){
        if (alu.out == 16b1111111111101111){
          state.d = state.SRA2;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.SRA2:    // Shift right arithmetic of 4 bits from 0110 1111 0000 1111 => 0000 0000 0110 1111
        alu.alufn = SRA;
        alu.a = 16b0110111100001111;
        alu.b = 16b0000000000000100;
        change_state.d = change_state.q+1;
        seg1=8h5;
        seg2=8h11;
        seg3=8h4;
        seg4=8hA;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000001101111){
          state.d = state.CMPEQ1;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.CMPEQ1:    // 100 == 100: True 
        alu.alufn = CMPEQ;
        alu.a = 16b0000000001100100;
        alu.b = 16b0000000001100100;
        change_state.d = change_state.q+1;
        seg1=8h14;
        seg2=8h15;
        seg3=8h0;
        seg4=8h2;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000000001){
          state.d = state.CMPEQ2;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.CMPEQ2:    // 100 == 1: False 
        alu.alufn = CMPEQ;
        alu.a = 16b0000000001100100;
        alu.b = 16b0000000000000001;
        change_state.d = change_state.q+1;
        seg1=8h14;
        seg2=8h15;
        seg3=8hA;
        seg4=8h2;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000000000){
          state.d = state.CMPEQ2;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.CMPLT1:    // 100 < 100: False 
        alu.alufn = CMPLT;
        alu.a = 16b0000000001100100;
        alu.b = 16b0000000001100100;
        change_state.d = change_state.q+1;
        seg1=8h9;
        seg2=8h16;
        seg3=8h0;
        seg4=8h2;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000000000){
          state.d = state.CMPLT2;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.CMPLT2:    // 100 < 110: True 
        alu.alufn = CMPLT;
        alu.a = 16b0000000001100100;
        alu.b = 16b0000000001101110;
        change_state.d = change_state.q+1;
        seg1=8h9;
        seg2=8h16;
        seg3=8hA;
        seg4=8h2;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000000001){
          state.d = state.CMPLT3;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.CMPLT3:    // 110 < 100: False 
        alu.alufn = CMPLT;
        alu.a = 16b0000000001101110;
        alu.b = 16b0000000001100100;
        change_state.d = change_state.q+1;
        seg1=8h9;
        seg2=8h16;
        seg3=8hB;
        seg4=8h2;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000000000){
          state.d = state.CMPLE1;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.CMPLE1:    // 100 <= 100: True 
        alu.alufn = CMPLE;
        alu.a = 16b0000000001100100;
        alu.b = 16b0000000001100100;
        change_state.d = change_state.q+1;
        seg1=8h9;
        seg2=8h14;
        seg3=8h0;
        seg4=8h2;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000000001){
          state.d = state.CMPLE2;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.CMPLE2:    // 100 <= 110: True 
        alu.alufn = CMPLE;
        alu.a = 16b0000000001100100;
        alu.b = 16b0000000001101110;
        change_state.d = change_state.q+1;
        seg1=8h9;
        seg2=8h14;
        seg3=8hA;
        seg4=8h2;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000000001){
          state.d = state.CMPLE3;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.CMPLE3:    // 110 <= 100: False 
        alu.alufn = CMPLE;
        alu.a = 16b0000000001101110;
        alu.b = 16b0000000001100100;
        change_state.d = change_state.q+1;
        seg1=8h9;
        seg2=8h14;
        seg3=8hB;
        seg4=8h2;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000000000){
          state.d = state.MUL1;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.MUL1:    //  Multiply a positive number with a positive number: 3 x 100 = 300
        alu.alufn = MUL;
        alu.a = 16b0000000000000011;
        alu.b = 16b0000000001100100;
        change_state.d = change_state.q+1;
        seg1=8h12;
        seg2=8h2;
        seg3=8h2;
        seg4=8h0;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000100101100){
          state.d = state.MUL2;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.MUL2:    //  Multiply a positive number with a negative number: 3 x -100 = -300
        alu.alufn = MUL;
        alu.a = 16b0000000000000011;
        alu.b = 16b1111111110011100;
        change_state.d = change_state.q+1;
        seg1=8h12;
        seg2=8h2;
        seg3=8h2;
        seg4=8hA;
        if(change_state.q==4999999){
        if (alu.out == 16b1111111011010100){
          state.d = state.MUL3;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.MUL3:    //  Multiply a negative number with a negative number: -3 x -100 = 300
        alu.alufn = MUL;
        alu.a = 16b1111111111111101;
        alu.b = 16b1111111110011100;
        change_state.d = change_state.q+1;
        seg1=8h12;
        seg2=8h2;
        seg3=8h2;
        seg4=8hB;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000100101100){
          state.d = state.MUL4;
          }
        else {
          state.d = state.ERR;
          }
        }
        
      state.MUL4:    //  Multiply a positive number with zero: 10 x 0 = 10
        alu.alufn = MUL;
        alu.a = 16b0000000000001010;
        alu.b = 16b0000000000000000;
        change_state.d = change_state.q+1;
        seg1=8h12;
        seg2=8h2;
        seg3=8h2;
        seg4=8hC;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000000000){
          state.d = state.DIV1;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.DIV1:    //  Divide a positive number by a positive number: 100 / 4 = 25
        alu.alufn = DIV;
        alu.a = 16b0000000001100100;
        alu.b = 16b0000000000000100;
        change_state.d = change_state.q+1;
        seg1=8h6;
        seg2=8h8;
        seg3=8hD;
        seg4=8h0;
        if(change_state.q==4999999){
        if (alu.out == 16b0000000000011001){
          state.d = state.DIV2;
          }
        else {
          state.d = state.ERR;
          }
        }
      state.DIV2:    //  Divide a positive number by a negative number: 100 / -4 = -25
        alu.alufn = DIV;
        alu.a = 16b0000000001100100;
        alu.b = 16b1111111111111100;
        change_state.d = change_state.q+1;
        seg1=8h6;
        seg2=8h8;
        seg3=8hD;
        seg4=8hA;
        if (alu.out == 16b1111111111100111){
          state.d = state.DIV3;
          }
        else {
          state.d = state.ERR;
          }
        
      state.DIV3:    //  Divide a negative number by a negative number: -100 / -4 = 25
        alu.alufn = DIV;
        alu.a = 16b1111111110011100;
        alu.b = 16b1111111111111100;
        change_state.d = change_state.q+1;
        seg1=8h6;
        seg2=8h8;
        seg3=8hD;
        seg4=8hB;
        if (alu.out == 16b0000000000011001){
          state.d = state.PASS;
          }
        else {
          state.d = state.ERR;
          }
        */
        
      state.PASS:
        seg1=8h3;
        seg2=8h4;
        seg3=8h5;
        seg4=8h5;
      
        
      state.ERR:
      seg1=8h7;
      seg2=8h4;
      seg3=8h8;
      seg4=8h9;
      if(reset){
        state.d=state.IDLE;
        }
    }
  }
}
