module autotester (
    input clk,  // clock
    input rst,  // reset_conditioner
    
    
    //IOs for the seven segment, IO LEDs
    input io_button[5],
    input io_dip[3][8],
    output io_ledtemp[8],
    output io_ledtempZ[8],
    output io_ledtempX[8],
   
    output seg1[8],
    output seg2[8],
    output seg3[8],
    output seg4[8]

  ) {
  
  .clk(clk) {
  //Buttons and dff counter. DFF counter is used for storing values a and b as we do not have 32 switches :(
    dff afinal[16];
    dff bfinal[16];
    button_conditioner sum;    
    button_conditioner reset_button;   
    button_conditioner start_stop_button; 

    .rst(rst) {
    //states for the test cases, dff counter which switches between states at a specific time interval.
    //All states have a corresponding ERR state to go to if the output is not as expected (aka if the test case fails)
    //Having an error state for each function allows us to debug faster when any test cases fail! 
      dff change_state[30];
          fsm state = {IDLE, STOREA, STOREB, COMPUTE, ADD1, ADD2, ADD3, ADD4,  SUB1, SUB2, SUB3, SUB4,
          AND1, AND2, OR1, OR2, XOR1, XOR2, LDR1, LDR2, B1, B2,
          NAND1, NAND2, NOR1, NOR2, SHL1, SHL2, 
          SHR1, SHR2, SRA1, SRA2, CMPEQ1, CMPEQ2, CMPLT1, 
          CMPLT2, CMPLT3, CMPLE1, CMPLE2, CMPLE3, MUL1, MUL2, 
          MUL3, MUL4, DIV1, DIV2, DIV3, PASS, ERR, 
        
          STOREA_ERR, STOREB_ERR, 
          COMPUTE_ERR, ADD_ERR, SUB_ERR, AND_ERR, OR_ERR, XOR_ERR, LDR_ERR,
          B_ERR, NAND_ERR, NOR_ERR, SHF_ERR, CMP_ERR, MUL_ERR,DIV_ERR
        };  

 
          } 
  }
  //constants for ease of operation assignment for the test cases (Refers to ALUFN for each function)
    const ADD   = 6b000000;
    const SUB   = 6b000001;
    const AND   = 6b011000; 
    const OR    = 6b011110;
    const XOR   = 6b010110; 
    const LDR   = 6b011010;
    const B     = 6b011100;
    const NAND  = 6b010111;
    const NOR   = 6b010001;
    const SHL   = 6b100000; 
    const SHR   = 6b100001; 
    const SRA   = 6b100011;
    const CMPEQ = 6b110011; 
    const CMPLT = 6b110101; 
    const CMPLE = 6b110111;
    const MUL   = 6b000010; 
    const DIV   = 6b000011;
  
  
  
  alu alu; //instantiate alu module

  always {

  sum.in=io_button[1]; //centre button
  reset_button.in=io_button[3]; //left button
  start_stop_button.in=io_button[4]; //right button
  
    //initialise outputs to 0 or else syntax errors
    alu.alufn = 6b000000;
    alu.a = 16hxx;
    alu.b = 16hxx;
    seg1=8h2;
    seg2=8h2;
    seg3=8h2;
    seg4=8h2;
    io_ledtemp=8b0;
    io_ledtempZ=8b0;
    io_ledtempX=8b0;

    
    //increase counter for states
    change_state.d=change_state.q+1;

    
    case (state.q){
      
      //Initial state which does "preparation" and reset for the testing (manual and auto)
      state.IDLE:
      seg1=8h2;
      seg2=8h2;
      seg3=8h2;
      seg4=8h2;
      afinal.d=0;
      bfinal.d=0;
      alu.a=0;
      alu.b=0;
      change_state.d=0;
      if(start_stop_button.out) //START AUTO TESTINGGG
        state.d=state.ADD1;
      if(io_dip[2][7]) //START MANUAL TESTINGGG
        state.d=state.STOREA;
      if(io_dip[2][6]) state.d=state.ERR;
      
      
      /* Manual testing that takes in 16bit inputs, transfers them to the operation modules and returns 
        the output displayed on LED*/
      state.ERR:

    seg1=8h14;
    seg2=8h11;
    seg3=8h11;
    seg4=8hff;
    afinal.d=io_dip[0];
    bfinal.d=io_dip[1];
    io_ledtempZ=io_dip[0];
    io_ledtemp=io_dip[1];
    
    if(io_dip[2][0]){
    alu.alufn=6b000000;
    alu.a=alu.z;
    alu.b=alu.v;
    io_ledtemp=alu.out[15:8];
    io_ledtempZ=alu.out[7:0]; }
    if(reset_button.out) state.d=state.IDLE;
      
      state.STOREA:
      seg1=8h5;
      seg2=8h16;
      seg3=8h0;
      seg3=8h4;
      io_ledtempX=8b001;
      io_ledtemp=io_dip[1];
      io_ledtempZ=io_dip[0];
      afinal.d = io_dip[1] + io_dip[0]; // 00000000 00000000
        if(io_dip[2][6]){
        state.d=state.STOREB;}
      
        if(reset_button.out){
          state.d=state.IDLE;}
      
      state.STOREB:
      seg1=8h5;
      seg2=8h16;
      seg3=8h0;
      seg3=8hE;
      io_ledtempX=8b010;
      io_ledtemp=io_dip[1];
      io_ledtempZ=io_dip[0];
      bfinal.d = io_dip[1] + io_dip[0]; // writing to stored values
        if(sum.out){
        state.d=state.COMPUTE;}
      
      if(reset_button.out){
          state.d=state.IDLE;}
             
      state.COMPUTE:
      seg1=8h0;
      seg2=8h3;
      seg3=8h12;
      seg3=8h12;
      io_ledtempX=8b100;              
      alu.a = afinal.q; //reading stored values
      alu.b = bfinal.q;
      alu.alufn = io_dip[2][5:0];
      io_ledtemp = alu.out[15:8]; //shows output on LEDs
      io_ledtempZ = alu.out[7:0];
      if(reset_button.out){
          state.d=state.IDLE;
        }
      
      /*Test cases for each operation. We added more functions (MUL/DIV/B/NAND/NOR). Test cases include fail states
        to help catch bad operations 
        */     
      
      state.ADD1:    // add 2 positive numbers: 150 + 30 = 180
        seg1=8h4;  //A
        seg2=8h6;  //d  
        seg3=8h6;  //d  
        seg4=8h1;  //1
        alu.a = 16b10010110;
        alu.b = 16b11110;
        alu.alufn=ADD;
        io_ledtempZ = alu.out[15:8];
        io_ledtemp = alu.out[7:0];
        io_ledtempX[0] = alu.z;
        io_ledtempX[2] = alu.v;
        io_ledtempX[4] = alu.n;       
        if(change_state.q[26]==1){        //0000000010110100
        change_state.d=0;
        if(alu.out==16b10110100)
          state.d=state.ADD2;  
        else 
          state.d = state.ADD_ERR;
        }
        
      
      state.ADD2:   // add 1 positive number with 1 negative number: 150 - 30 = 120 
        alu.alufn = ADD;
        alu.a = 16b10010110;
        alu.b = 16b1111111111100010;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        io_ledtempX[0] = alu.z;
        io_ledtempX[2] = alu.v;
        io_ledtempX[4] = alu.n;  
        seg1=8h4;  //A  
        seg2=8h6;  //d  
        seg3=8h6;  //d  
        seg4=8hA;  //2
        if(change_state.q[26]==1){
        change_state.d=0;        
        if (alu.out == 16b1111000){
          state.d = state.ADD3;
          }
        else {
          state.d = state.ADD_ERR;
          }
        }
      
      state.ADD3:   // add 1 negative number with 1 positive number: -150 + 30 = -120 
        alu.alufn = ADD;
        alu.a = 16b1111111101101010;
        alu.b = 16b11110;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        io_ledtempX[0] = alu.z;
        io_ledtempX[2] = alu.v;
        io_ledtempX[4] = alu.n;  
        seg1=8h4;  //A  
        seg2=8h6;  //d  
        seg3=8h6;  //d  
        seg4=8hB;  //3
        if(change_state.q[26]==1){
        change_state.d=0;        
        if (alu.out == 16b1111111110001000){
          state.d = state.ADD4;
          }
        else {
          state.d = state.ADD_ERR;
          }
        }
        
      state.ADD4:   // add two zeros together: 0 + 0 = 0 
        alu.alufn = ADD;
        alu.a = 16b0000000000000000;
        alu.b = 16b0000000000000000;
        change_state.d = change_state.q+1;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        io_ledtempX[0] = alu.z;
        io_ledtempX[2] = alu.v;
        io_ledtempX[4] = alu.n;  
        seg1=8h4;  //A  
        seg2=8h6;  //d  
        seg3=8h6;  //d  
        seg4=8hC;  //4
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b0000000000000000){
          state.d = state.SUB1;
          }
        else {
          state.d = state.ADD_ERR;
          }
        }
        
        
      state.SUB1:    // subtract 1 positive number from 1 positive number: 150 - 30 = 120
        alu.alufn = SUB;
        alu.a = 16b0000000010010110;
        alu.b = 16b0000000000011110;
        change_state.d = change_state.q+1;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        io_ledtempX[0] = alu.z;
        io_ledtempX[2] = alu.v;
        io_ledtempX[4] = alu.n;  
        seg1=8h5;  //S
        seg2=8hD;  //u
        seg3=8hE;  //b
        seg4=8h1;  //1
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b0000000001111000){
          state.d = state.SUB2;
          }
        else {
          state.d = state.SUB_ERR;
          }
        }

      state.SUB2:    // subtract 1 negative number from 1 positive number: 150 - (-30) = 180
        alu.alufn = SUB;
        alu.a = 16b0000000010010110;
        alu.b = 16b1111111111100010;
        change_state.d = change_state.q+1;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        io_ledtempX[0] = alu.z;
        io_ledtempX[2] = alu.v;
        io_ledtempX[4] = alu.n;  
        seg1=8h5;  //S
        seg2=8hD;  //u
        seg3=8hE;  //b
        seg4=8hA;  //2
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b0000000010110100){
          state.d = state.SUB3;
          }
        else {
          state.d = state.SUB_ERR;
          }
        }
        
      state.SUB3:    // subtract 1 positive number from 1 negative number: -150 - 30 = -180
        alu.alufn = SUB;
        alu.a = 16b1111111101101010;
        alu.b = 16b0000000000011110;
        change_state.d = change_state.q+1;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        io_ledtempX[0] = alu.z;
        io_ledtempX[2] = alu.v;
        io_ledtempX[4] = alu.n;  
        seg1=8h5;  //S
        seg2=8hD;  //u
        seg3=8hE;  //b
        seg4=8hB;  //3
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b1111111101001100){
          state.d = state.SUB4;
          }
        else {
          state.d = state.SUB_ERR;
          }
        }
        
      state.SUB4:    // subtract 1 negative number from 1 negative number: -150 - (-30) = -120
        alu.alufn = SUB;
        alu.a = 16b1111111101101010;
        alu.b = 16b1111111111100010;
        change_state.d = change_state.q+1;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        io_ledtempX[0] = alu.z;
        io_ledtempX[2] = alu.v;
        io_ledtempX[4] = alu.n;  
        seg1=8h5;  //S
        seg2=8hD;  //u
        seg3=8hE;  //b
        seg4=8hC;  //4
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b1111111110001000){
          state.d = state.AND1;
          }
        else {
          state.d = state.SUB_ERR;
          }
        }
      state.AND1:    // AND two values: 1111 0001 AND 1111 1100 => 1111 0000
        alu.alufn = AND;
        alu.a = 16b0000000011110001;
        alu.b = 16b0000000011111100;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h4;  //A
        seg2=8hF;  //n
        seg3=8h6;  //d
        seg4=8h1;  //1
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b0000000011110000){
          state.d = state.AND2;
          }
        else {
          state.d = state.AND_ERR;
          }
        }
      state.AND2:    // AND two values: 0000 0001 AND 1111 1111 => 0000 0001
        alu.alufn = AND;
        alu.a = 16b0000000000000001;
        alu.b = 16b0000000011111111;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h4;  //A
        seg2=8hF;  //n
        seg3=8h6;  //d
        seg4=8hA;  //2
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b0000000000000001){
          state.d = state.OR1;
          }
        else {
          state.d = state.AND_ERR;
          }
        }
      state.OR1:    // OR two values: 0000 0001 AND 1111 1111 => 1111 1111
        alu.alufn = OR;
        alu.a = 16b0000000000000001;
        alu.b = 16b0000000011111111;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h10;  //o
        seg2=8h11;  //r
        seg3=8h1;  //1
        seg4=8h2;  //-
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b0000000011111111){
          state.d = state.OR2;
          }
        else {
          state.d = state.OR_ERR;
          }
        }
      
      state.OR2:    // OR two values: 0000 0001 AND 0000 1110 => 0000 1111
        alu.alufn = OR;
        alu.a = 16b0000000000000001;
        alu.b = 16b0000000000001110;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h10;  //o
        seg2=8h11;  //r
        seg3=8hA;  //2
        seg4=8h2;  //-
        if(change_state.q[26]==1){
         change_state.d=0;
        if (alu.out == 16b0000000000001111){
          state.d = state.XOR1;
          }
        else {
          state.d = state.OR_ERR;
          }
        }
        
      state.XOR1:    // XOR two values: 0000 0001 AND 0000 1111 => 0000 1110
        alu.alufn = XOR;
        alu.a = 16b0000000000000001;
        alu.b = 16b0000000000001111;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h12;  //x
        seg2=8h10;  //o
        seg3=8h11;  //r  
        seg4=8h1;  //1
        if(change_state.q[26]==1){
                change_state.d=0;
        if (alu.out == 16b0000000000001110){
          state.d = state.XOR2;
          }
        else {
          state.d = state.XOR_ERR;
          }
        }
        
      state.XOR2:    // XOR two values: 0000 1111 AND 0000 1111 => 0000 0000
        alu.alufn = XOR;
        alu.a = 16b0000000000001111;
        alu.b = 16b0000000000001111;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h12;  //x
        seg2=8h10;  //o
        seg3=8h11;  //r
        seg4=8hA;  //2
        if(change_state.q[26]==1){
                change_state.d=0;
        if (alu.out == 16b0000000000000000){
          state.d = state.LDR1;
          }
        else {
          state.d = state.XOR_ERR;
          }
        }
      state.LDR1:    // Get the LDR ("A") of two values: 0000 0011 , 0000 1111 => 0000 0011
        alu.alufn = LDR;
        alu.a = 16b0000000000000011;
        alu.b = 16b0000000000001111;
        change_state.d = change_state.q+1;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h9;  //L
        seg2=8h6;  //d
        seg3=8h11;  //r
        seg4=8h1;  //1
        if(change_state.q[26]==1){
                change_state.d=0;
        if (alu.out == 16b0000000000000011){
          state.d = state.LDR2;
          }
        else {
          state.d = state.LDR_ERR;
          }
        }
      
      state.LDR2:    // Get the LDR ("A") of two values: 1111 0011 , 0000 1111 => 1111 0011
        alu.alufn = LDR;
        alu.a = 16b0000000011110011;
        alu.b = 16b0000000000001111;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h9;  //L
        seg2=8h6;  //d
        seg3=8h11;  //r
        seg4=8hA;  //2
        if(change_state.q[26]==1){
                change_state.d=0;
        if (alu.out == 16b0000000011110011){
          state.d = state.B1;
          }
        else {
          state.d = state.LDR_ERR;
          }
        }
           
      state.B1:    // Get the "B" of two values: 0000 0011 , 0000 1111 => 0000 1111
        alu.alufn = B;
        alu.a = 16b0000000000000011;
        alu.b = 16b0000000000001111;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h2;  //-
        seg2=8h2;  //-
        seg3=8hE;  //b
        seg4=8h1;  //1
        if(change_state.q[26]==1){
                change_state.d=0;
        if (alu.out == 16b0000000000001111){
          state.d = state.B2;
          }
        else {
          state.d = state.B_ERR;
          }
        }
           
      state.B2:    // Get the "B" of two values: 1111 0011 , 0000 1101 => 1111 1101
        alu.alufn = B;
        alu.a = 16b0000000011110011;
        alu.b = 16b0000000000001101;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h2;  //-
        seg2=8h2;  //-
        seg3=8hE;  //b
        seg4=8hA;  //2
        if(change_state.q[26]==1){
           change_state.d=0;
        if (alu.out == 16b0000000000001101){
          state.d = state.NAND1;
          }
        else {
          state.d = state.B_ERR;
          }
        }
           
      state.NAND1:    // NAND two values: 0000 0011 NAND 0000 1111 => 1111 1100
        alu.alufn = NAND;
        alu.a = 16b0000000000000011;
        alu.b = 16b0000000000001111;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8hF;  // n
        seg2=8h10;  // a
        seg3=8hF;  // n
        seg4=8h1;  // 1
        if(change_state.q[26]==1){
                change_state.d=0;
        if (alu.out == 16b1111111111111100){ 
          state.d = state.NAND2;
          }
        else {
          state.d = state.NAND_ERR;
          }
        }
         
      state.NAND2:    // NAND two values: 1111 0011 NAND 0000 1101 => 1111 1110
        alu.alufn = NAND;
        alu.a = 16b0000000011110011;
        alu.b = 16b0000000000001101;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8hF;  // n
        seg2=8h10;  // a
        seg3=8hF;  // n
        seg4=8hA;  // 2
        if(change_state.q[26]==1){
                change_state.d=0;
        if (alu.out == 16b1111111111111110){
          state.d = state.NOR1;
          }
        else {
          state.d = state.NAND_ERR;
          }
        }
           
      state.NOR1:    // NOR two values: 0000 0011 NOR 0000 1111 => 1111 0000
        alu.alufn = NOR;
        alu.a = 16b0000000000000011;
        alu.b = 16b0000000000001111;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8hF; //n
        seg2=8h10; //o
        seg3=8h11; //r
        seg4=8h1;  //1
        if(change_state.q[26]==1){
                change_state.d=0;
        if (alu.out == 16b1111111111110000){
          state.d = state.NOR2;
          }
        else {
          state.d = state.NOR_ERR;
          }
        }
           
      state.NOR2:    // NOR two values: 1111 0011 NOR 0000 1101 => 0000 0000
        alu.alufn = NOR;
        alu.a = 16b0000000011110011;
        alu.b = 16b0000000000001101;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8hF; //n
        seg2=8h10; //o
        seg3=8h11; //r
        seg4=8hA; //2
        if(change_state.q[26]==1){
                change_state.d=0;
        if (alu.out == 16b1111111100000000){
          state.d = state.SHL1;
          }
        else {
          state.d = state.NOR_ERR;
          }
        }
           
           
      state.SHL1:    // Shift left 0 bits from 0000 1111 => 0000 1111
        alu.alufn = SHL;
        alu.a = 16b0000000000001111;
        alu.b = 16b0000000000000000;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h5;  //S
        seg2=8h13;  //h
        seg3=8h8;  //l
        seg4=8h1;  //1
        if(change_state.q[26]==1){
                change_state.d=0;
        if (alu.out == 16b0000000000001111){
          state.d = state.SHL2;
          }
        else {
          state.d = state.SHF_ERR;
          }
        }
      state.SHL2:    // Shift left 4 bits from 0000 1111 => 1111 0000
        alu.alufn = SHL;
        alu.a = 16b0000000000001111;
        alu.b = 16b0000000000000100;

        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h5;  //S
        seg2=8h13;  //h
        seg3=8h8;  //l
        seg4=8hA;  //2
        if(change_state.q[26]==1){
                change_state.d=0;
        if (alu.out == 16b0000000011110000){
          state.d = state.SHR1;
          }
        else {
          state.d = state.SHF_ERR;
          }
        }
      state.SHR1:    // Shift right 0 bits from 0000 1111 => 0000 1111
        alu.alufn = SHR;
        alu.a = 16b0000000000001111;
        alu.b = 16b0000000000000000;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h5;  //S
        seg2=8h13;  //h
        seg3=8h11;  //r
        seg4=8h1;  //1
        if(change_state.q[26]==1){
                change_state.d=0;
        if (alu.out == 16b0000000000001111){
          state.d = state.SHR2;
          }
        else {
          state.d = state.SHF_ERR;
          }
        }
      state.SHR2:    // Shift right 8 bits from 0110 1111 0000 1111 => 0000 0000 0110 1111
        alu.alufn = SHR;
        alu.a = 16b0110111100001111;
        alu.b = 16b0000000000001000;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h5;  //S
        seg2=8h13;  //h
        seg3=8h11;  //r
        seg4=8hA;  //2
        if(change_state.q[26]==1){
                change_state.d=0;
        if (alu.out == 16b110111100001111){
          state.d = state.SRA1;
          }
        else {
          state.d = state.SHF_ERR;
          }
        }
       
      state.SRA1:    // Shift right arithmetic of 4 bits from 1110 1111 0000 1111 => 1111 1111 1110 1111
        alu.alufn = SRA;  
        alu.a = 16b1110111100001111;
        alu.b = 16b0000000000000100; //
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h5;  //S
        seg2=8h11;  //r
        seg3=8h4;  //A
        seg4=8h1;  //1
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b1111111011110000){
          state.d = state.SRA2;
          }
        else {
          state.d = state.SHF_ERR;
          }
        }
      state.SRA2:    // Shift right arithmetic of 4 bits from 0110 1111 0000 1111 => 0000 0000 0110 1111
        alu.alufn = SRA;
        alu.a = 16b0110111100001111;
        alu.b = 16b0000000000000100;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h5;  //S
        seg2=8h11;  //r
        seg3=8h4;  //A
        seg4=8hA;  //2
        if(change_state.q[26]==1){
         change_state.d=0;
        if (alu.out == 16b0000011011110000){
          state.d = state.CMPEQ1;
          }
        else {
          state.d = state.SHF_ERR;
          }
        }
           
      state.CMPEQ1:    // 100 == 100: True 
        alu.alufn = CMPEQ;
        alu.a = 16b0000000001100100;
        alu.b = 16b0000000001100100;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h14;  //E
        seg2=8h15;  //q
        seg3=8h1;  //1
        seg4=8h2;  //-
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b0000000000000001){
          state.d = state.CMPEQ2;
          }
        else {
          state.d = state.CMP_ERR;
          }
        }
      state.CMPEQ2:    // 100 == 1: False 
        alu.alufn = CMPEQ;
        alu.a = 16b0000000001100100;
        alu.b = 16b0000000000000001;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h14;  //E
        seg2=8h15;  //q
        seg3=8hA;  //2
        seg4=8h2;  //-
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b0000000000000000){
          state.d = state.CMPLT1;
          }
        else {
          state.d = state.CMP_ERR;
          }
        }
      state.CMPLT1:    // 100 < 100: False 
        alu.alufn = CMPLT;
        alu.a = 16b0000000001100100;
        alu.b = 16b0000000001100100;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h9;  //L
        seg2=8h16;  //t
        seg3=8h1;  //1
        seg4=8h2;  //-
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b0000000000000000){
          state.d = state.CMPLT2;
          }
        else {
          state.d = state.CMP_ERR;
          }
        }
      state.CMPLT2:    // 100 < 110: True 
        alu.alufn = CMPLT;
        alu.a = 16b0000000001100100;
        alu.b = 16b0000000001101110;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h9;  //L
        seg2=8h16;  //t
        seg3=8hA;  //2
        seg4=8h2;  //-
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b0000000000000001){
          state.d = state.CMPLT3;
          }
        else {
          state.d = state.CMP_ERR;
          }
        }
      state.CMPLT3:    // 110 < 100: False 
        alu.alufn = CMPLT;
        alu.a = 16b0000000001101110;
        alu.b = 16b0000000001100100;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h9;  //L
        seg2=8h16;  //t
        seg3=8hB;  //3
        seg4=8h2;  //-
        if(change_state.q[26]==1){
                        change_state.d=0;
        if (alu.out == 16b0000000000000000){
          state.d = state.CMPLE1;
          }
        else {
          state.d = state.CMP_ERR;
          }
        }
      state.CMPLE1:    // 100 <= 100: True 
        alu.alufn = CMPLE;
        alu.a = 16b0000000001100100;
        alu.b = 16b0000000001100100;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h9;  //L
        seg2=8h14;  //E
        seg3=8h1;  //1
        seg4=8h2;  //-
        if(change_state.q[26]==1){
                        change_state.d=0;
        if (alu.out == 16b0000000000000001){
          state.d = state.CMPLE2;
          }
        else {
          state.d = state.CMP_ERR;
          }
        }
      state.CMPLE2:    // 100 <= 110: True 
        alu.alufn = CMPLE;
        alu.a = 16b0000000001100100;
        alu.b = 16b0000000001101110;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h9;  //L
        seg2=8h14;  //E
        seg3=8hA;  //2
        seg4=8h2;  //-
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b0000000000000001){
          state.d = state.CMPLE3;
          }
        else {
          state.d = state.CMP_ERR;
          }
        }
      state.CMPLE3:    // 110 <= 100: False 
        alu.alufn = CMPLE;
        alu.a = 16b0000000001101110;
        alu.b = 16b0000000001100100;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h9;  //L
        seg2=8h14;  //E
        seg3=8hB;  //3
        seg4=8h2;  //-
        if(change_state.q[26]==1){
                        change_state.d=0;
        if (alu.out == 16b0000000000000000){
          state.d = state.MUL1;
          }
        else {
          state.d = state.CMP_ERR;
          }
        }
        
      state.MUL1:    //  Multiply a positive number with a positive number: 3 x 100 = 300
        alu.alufn = MUL;
        alu.a = 16b0000000000000011;
        alu.b = 16b0000000001100100;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h12;  //X
        seg2=8h2;  //-
        seg3=8h2;  //-
        seg4=8h1;  //1
        if(change_state.q[26]==1){
          change_state.d=0;
        if (alu.out == 16b0000000100101100){
          state.d = state.MUL2;
          }
        else {
          state.d = state.MUL_ERR;
          }
        }
      state.MUL2:    //  Multiply a positive number with a negative number: 3 x -100 = -300
        alu.alufn = MUL;
        alu.a = 16b0000000000000011;
        alu.b = 16b1111111110011100;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h12;  //X
        seg2=8h2;  //-
        seg3=8h2;  //-
        seg4=8hA;  //2
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b1111111011010100){
          state.d = state.MUL3;
          }
        else {
          state.d = state.MUL_ERR;
          }
        }
      state.MUL3:    //  Multiply a negative number with a negative number: -3 x -100 = 300
        alu.alufn = MUL;
        alu.a = 16b1111111111111101;
        alu.b = 16b1111111110011100;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h12;  //X
        seg2=8h2;  //-
        seg3=8h2;  //-
        seg4=8hB;  //3
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b0000000100101100){
          state.d = state.MUL4;
          }
        else {
          state.d = state.MUL_ERR;
          }
        }
        
      state.MUL4:    //  Multiply a positive number with zero: 10 x 0 = 10
        alu.alufn = MUL;
        alu.a = 16b0000000000001010;
        alu.b = 16b0000000000000000;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h12;  //X
        seg2=8h2;  //-
        seg3=8h2;  //-
        seg4=8hC;  //4
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b0000000000000000){
          state.d = state.DIV1;
          }
        else {
          state.d = state.MUL_ERR;
          }
        }
      state.DIV1:    //  Divide a positive number by a positive number: 100 / 4 = 25
        alu.alufn = DIV;
        alu.a = 16b0000000001100100;
        alu.b = 16b0000000000000100;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h6;  //d
        seg2=8h8;  //I
        seg3=8hD;  //v
        seg4=8h1;  //1
        if(change_state.q[26]==1){
                        change_state.d=0;
        if (alu.out == 16b0000000000011001){
          state.d = state.DIV2;
          }
        else {
          state.d = state.DIV_ERR;
          }
        }
      state.DIV2:    //  Divide a positive number by a negative number: 100 / -4 = -25
        alu.alufn = DIV;
        alu.a = 16b0000000001100100;
        alu.b = 16b1111111111111100;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        seg1=8h6;  //d
        seg2=8h8;  //I
        seg3=8hD;  //v
        seg4=8hA;  //2
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b1111111111100111){
          state.d = state.DIV3;
          }
        else {
          state.d = state.DIV_ERR;
          }
        }
        
      state.DIV3:    //  Divide a negative number by a negative number: -100 / -4 = 25
        alu.alufn = DIV;
        alu.a = 16b1111111110011100;
        alu.b = 16b1111111111111100;
        io_ledtemp = alu.out[15:8];
        io_ledtempZ = alu.out[7:0];
        change_state.d = change_state.q+1;
        seg1=8h6;  //d
        seg2=8h8;  //I
        seg3=8hD;  //v
        seg4=8hB;  //3
        if(change_state.q[26]==1){
        change_state.d=0;
        if (alu.out == 16b0000000000011001){
          state.d = state.PASS;
          }
        else {
          state.d = state.DIV_ERR;
          }
        }
        
        
      state.PASS:
        seg1=8h3;  //P
        seg2=8h4;  //A
        seg3=8h5;  //S
        seg4=8h5;  //S
              if(reset_button.out){
        state.d=state.IDLE;
        }
      
      
        
        /*Customized test cases 
        because who doesn't like their own fail states when a test case fails? :)
        */
        state.ADD_ERR:
        seg1=8h4;  //A  
        seg2=8h6;  //d  
        seg3=8h6;  //d
        seg4=8h14;  //E
        if(reset_button.out){
        state.d=state.IDLE;
        }
       
        state.SUB_ERR:
        seg1=8h8;  //S  
        seg2=8h5;  //u
        seg3=8hD;  //b
        seg4=8h14;  //E
        if(reset_button.out){
        state.d=state.IDLE;
        }
        
        state.AND_ERR:
        seg1=8h4;  //A
        seg2=8hF;  //n
        seg3=8h6;  //d
        seg4=8h14;  //E
        if(reset_button.out){
        state.d=state.IDLE;
        }
        
        state.OR_ERR:
        seg1=8h10;  //o
        seg2=8h11;  //r
        seg3=8h2;   //-
        seg4=8h14;  //E
        if(reset_button.out){
        state.d=state.IDLE;
        }
       
        state.XOR_ERR:
        seg1=8h12;  //X
        seg2=8h10;  //o
        seg3=8h11;  //r
        seg4=8h14;   //E
        if(reset_button.out){
        state.d=state.IDLE;
        }
        
        state.LDR_ERR:
        seg1=8h9;  //L
        seg2=8h6;  //d
        seg3=8h11;  //r
        seg4=8h14;  //E
        if(reset_button.out){
        state.d=state.IDLE;
        }
        
        state.B_ERR:
        seg1=8h2;  //-
        seg2=8h2;  //-
        seg3=8hE;   //b
        seg4=8h14;  //E
        if(reset_button.out){
        state.d=state.IDLE;
        }
        
        state.NAND_ERR:
        seg1=8hF;  //n
        seg2=8h10;  //a
        seg3=8hF;   //n
        seg4=8h14;  //E
        if(reset_button.out){
        state.d=state.IDLE;
        }
        
        state.NOR_ERR:
        seg1=8hF;  //n
        seg2=8h10;  //o
        seg3=8h11;   //r
        seg4=8h14;  //E
        if(reset_button.out){
        state.d=state.IDLE;
        }
       
        state.SHF_ERR:
        seg1=8h5;  //S
        seg2=8h13;  //h
        seg3=8h17;  //_
        seg4=8h14;  //E
        if(reset_button.out){
        state.d=state.IDLE;
        }
        
        state.CMP_ERR:
        seg1=8h18;  //C
        seg2=8h3;  //P
        seg3=8h17;   //_
        seg4=8h14;  //E
        if(reset_button.out){
        state.d=state.IDLE;
        }
        
        state.MUL_ERR:
        seg1=8h12;  //X
        seg2=8h2;  //-
        seg3=8h2;   //-
        seg4=8h14;  //E
        if(reset_button.out){
        state.d=state.IDLE;
        }
        
        state.DIV_ERR:
        seg1=8h6;  //d
        seg2=8h8;  //I
        seg3=8hD;   //v
        seg4=8h14;  //E
        if(reset_button.out){
        state.d=state.IDLE;
        }
        
      
    }
  }
}
